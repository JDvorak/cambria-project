<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Designs on Cambria Development Notes</title>
    <link>http://inkandswitch.github.io/cambria/designs/</link>
    <description>Recent content in Designs on Cambria Development Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Jul 2020 12:05:58 -0700</lastBuildDate>
    
	<atom:link href="http://inkandswitch.github.io/cambria/designs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Micromerge</title>
      <link>http://inkandswitch.github.io/cambria/designs/micromerge/</link>
      <pubDate>Fri, 17 Jul 2020 12:05:58 -0700</pubDate>
      
      <guid>http://inkandswitch.github.io/cambria/designs/micromerge/</guid>
      <description>As part of designing the new integration between Chitin and our CRDTs, Martin wrote a tiny two-hundred line version of Automerge called Micromerge that displays the core behaviours of automerge with none of the additional complexity of production software.
I have included it here in its complete form:
const ROOT_ID = &amp;#39;00000000-0000-0000-0000-000000000000&amp;#39; /** * Miniature implementation of a subset of Automerge. Supports the following: * - only map, list, and primitive datatypes (no table, text, counter, or date objects) * - no undo/redo * - no conflicts on concurrent updates to the same field (uses last-writer-wins instead) * - no API for creating new changes (you need to create change objects yourself) * - no buffering of changes that are missing their causal dependencies * - no saving or loading in serialised form * - relies on object mutation (no immutability) */ class Micromerge { constructor() { this.</description>
    </item>
    
    <item>
      <title>Chitin, v4: Op Log Example</title>
      <link>http://inkandswitch.github.io/cambria/designs/chitin-v4/</link>
      <pubDate>Tue, 07 Jul 2020 09:47:58 -0700</pubDate>
      
      <guid>http://inkandswitch.github.io/cambria/designs/chitin-v4/</guid>
      <description>Here&amp;rsquo;s a concrete example to illustrate how the &amp;ldquo;op log&amp;rdquo; based Chitin 4 system works, and then some brief explanation of why it&amp;rsquo;s better than our previous iterations.
Let&amp;rsquo;s say we have three related schemas for a Task (listed below), which have evolved as we develop the app. Our goal is that clients can read/write to the same document using any of the schemas.
V1 {title: stringdescription: string}// - rename title to name// - add a complete booleanV2 {name: stringdescription: stringcomplete: boolean}// - change the complete boolean to a 3-valued &amp;quot;status&amp;quot; fieldV3 {name: stringdescription: stringstatus: string}In Chitin 4, writes are straightforward.</description>
    </item>
    
    <item>
      <title>On Scalar to Array Conversions</title>
      <link>http://inkandswitch.github.io/cambria/designs/converting-scalar-to-arrays/</link>
      <pubDate>Mon, 06 Jul 2020 16:47:58 -0700</pubDate>
      
      <guid>http://inkandswitch.github.io/cambria/designs/converting-scalar-to-arrays/</guid>
      <description>Imagine an issue tracker which has gone from 0-1 assignees (nullable scalar) to 0-n (array) What should happen when the two versions make writes?
In general, we can consider the old version (denoted {} in examples) as a window onto the head of the new version&amp;rsquo;s array (denoted []).
Reads In the simplest case, both values are empty.
[{}]With a single value, the read semantics are equivalent.
[{&amp;quot;Alice&amp;quot;}]Given additional values added to the new version, the old version would see just the head of the list.</description>
    </item>
    
  </channel>
</rss>